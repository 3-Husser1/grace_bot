using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using GraceBot.Models;
using Microsoft.Bot.Connector;
using System.Text.RegularExpressions;
using System.IO;
using Newtonsoft.Json;

namespace GraceBot
{
    public class DbManager : IDbManager
    {
        GraceBotContext _db;

        private DbManager() { }
        // constructor 
        public DbManager(GraceBotContext db)
        {
            _db = db;
        }
        
        // Implement the method defined in IDbManager interface.
        // Add an activity in database as an asynchronous operation when the activity is generated by the bot.
        public async Task AddActivity(Activity activity, ProcessStatus processStatus = ProcessStatus.BotMessage)
        {
            if (activity == null || activity.Id == null)
                throw new ArgumentNullException("The activity or activity.Id cannot be null");
            if (_db.Activities.Any(a => a.Id == activity.Id))
                return;
            var activityModel = ConvertToModel(activity, processStatus);
            AttachReference(activityModel);
            _db.Activities.Add(activityModel);
            await _db.SaveChangesAsync();
        }

        public async Task UpdateActivityProcessStatus(string activityId, ProcessStatus processStatus)
        {
            if (activityId == null)
                throw new ArgumentNullException("activity cannot be null.");
            var oldRecord = _db.Activities.Include(r => r.From).Include(r => r.Recipient)
                .Include(r => r.Conversation).SingleOrDefault(o => o.Id.Equals(activityId));            
            if(oldRecord != null)
            {
                oldRecord.ProcessStatus = processStatus;
                AttachReference(oldRecord);
                await _db.SaveChangesAsync();
            }
            else throw new RowNotInTableException("No matching Activity record is found.");
        }

        // Implement the method defined in IDbManager interface.
        // Return a list of activities in database (5 contiguous ones from the start) which stand for unprocessed questions.
        public List<Activity> FindUnprocessedQuestions(int amount = 5, List<string> keywords = null)
        {
            if (amount < 1)
                throw new ArgumentOutOfRangeException("amount cannot be less than 1.");

            var query = _db.Activities
                            .Include(r => r.From)
                            .Include(r => r.Recipient)
                            .Include(r => r.Conversation)
                            .Where(o => o.ProcessStatus == ProcessStatus.Unprocessed);

            if (keywords != null && keywords.Any())
            {
                List<string> variants = new List<string>();
                foreach (var w in keywords)
                {
                    variants.Add(w.ToLower());
                    variants.Add(w.ToUpper());
                    variants.Add(w.ToLowerInvariant());
                    variants.Add(w.ToUpperInvariant());
                }
                keywords.AddRange(variants);
                query = query.Where(o => keywords.Any(w => o.Text.Contains(w)));
            }

            var records = query.Take(amount).ToList();
            var activities = new List<Activity>();
            foreach (var am in records)
            {
                activities.Add(ConvertToActivity(am));
            }
            return activities;
        }


        // Implement the method defined in IDbManager interface.
        // Return an activity (if found in database) given the ID.
        public Activity FindActivity(string id)
        {
            var activityRecord = FindActivityModel(id);
            if (activityRecord == null) return null;
            return ConvertToActivity(activityRecord);
        }

        public UserRole GetUserRole(string channelAccountId)
        {
            if (channelAccountId == null)
                throw new ArgumentNullException("channelAccountId cannot be null.");

            var userAccount = FindUserAccount(channelAccountId);
            return userAccount.Role;
        }


        public ProcessStatus GetProcessStatus(string activityId)
        {
            var activityRecord = _db.Activities.Include(r => r.From).Include(r => r.Recipient)
                    .Include(r => r.Conversation).SingleOrDefault(o => o.Id == activityId);
            if (activityRecord == null) throw new RowNotInTableException("Cannot find the activity.");
            return activityRecord.ProcessStatus;
        }

        public void AddAnswer(string subject, string answerActivityId)
        {
            if (string.IsNullOrWhiteSpace(answerActivityId) || string.IsNullOrWhiteSpace(answerActivityId))
                throw new ArgumentException("The subject and answerActivityId cannot be null or empty.");
            var answerActivityModel = FindActivityModel(answerActivityId);
            if (answerActivityModel == null)
                throw new RowNotInTableException(
                    "Cannot find the ActivityModel row of the answer, please add the answer Activity into database before invoking this method.");

            var answer = _db.Answers.SingleOrDefault(a => a.Subject == subject);
            if (answer != null)
                return;
            UserAccount author;
            try
            {
                if (answerActivityModel.From == null || answerActivityModel.From.Id == null)
                    throw new RowNotInTableException();
                author = FindUserAccount(answerActivityModel.From.Id);
            } catch (RowNotInTableException)
            {
                author = null;
            }
            answer = new Answer(subject, answerActivityModel, author);
            AttachReference(answer.Author, _db.UserAccounts);
            _db.Answers.Add(answer);
            _db.SaveChanges();
        }

        public void AddAnswerRating(string subject, AnswerGrade rate, 
            string answerActivityId, string raterChannelAccountId, string commentActivityId = null)
        {
            if (string.IsNullOrWhiteSpace(subject) || string.IsNullOrWhiteSpace(answerActivityId))
                throw new ArgumentException("answerActivityId and subject cannot be null or empty.");
            var answer = _db.Answers.Include(a => a.Author).Include(a => a.Ratings)
                .SingleOrDefault(a => a.Subject == subject);
            if (answer == null)
                throw new RowNotInTableException(
                    "Cannot find the answer referes to the given subject, please add the answer before invoking this method.");

            var answerActivityModel = FindActivityModel(answerActivityId);
            if (answerActivityModel == null)
                throw new RowNotInTableException(
                    "Cannot find the ActivityModel row of the answer, please add the Activity into database before invoking this method.");

            var raterChannelAccount = _db.ChannelAccounts
                .Include(c => c.UserAccount).Include(c => c.RelatedActivities)
                .SingleOrDefault(c => c.Id == raterChannelAccountId);
            if(raterChannelAccount == null)
                throw new RowNotInTableException(
                    "Cannot find the ChannelAccount row of the rater, please add the ChannelAccount into database before invoking this method.");

            ActivityModel commentActivityModel = null;
            if(commentActivityId != null)
            {
                commentActivityModel = FindActivityModel(commentActivityId);
                if (commentActivityModel == null)
                    throw new RowNotInTableException(
                        "Cannot find the ActivityModel row of the comment, please add the Activity into database before invoking this method.");
            }

            var answerRating = new AnswerRating(answer, rate, answerActivityModel, raterChannelAccount, commentActivityModel);

            AttachReference(answerRating.Answer, _db.Answers);
            AttachReference(answerRating.AnswerActivity, _db.Activities);
            AttachReference(answerRating.RaterChannelAccount, _db.ChannelAccounts);
            AttachReference(answerRating.CommentActivity, _db.Activities);
            _db.AnswerRatings.Add(answerRating);
            _db.SaveChanges();
        }

        public List<AnswerRating> FindAnswerRating(string subject)
        {
            var answer = _db.Answers.SingleOrDefault(o => o.Subject == subject);
            return answer?.Ratings;
        }

        public bool ContainsAnswerRating(string subject, string answerActivityId, string raterChannelAccountId)
        {
            var ratings = FindAnswerRating(subject);
            if (ratings != null && ratings.Any(r => (r.RaterChannelAccountId == raterChannelAccountId)))
                return true;
            return false;
        }

        public Dictionary<string, string> GetDefinition()
        {
            Dictionary<string, string> definitions = new Dictionary<string, string>();
            var sep = Path.DirectorySeparatorChar;
            using (var reader =
                new JsonTextReader(
                new StreamReader(AppDomain.CurrentDomain.BaseDirectory + $"{sep}Words{sep}dictionary.json"))
            )
            {
                definitions = new JsonSerializer().Deserialize<Dictionary<string, string>>(reader);
            }

            foreach(var a in _db.Answers)
            {
                if(!definitions.ContainsKey(a.Subject))
                    definitions.Add(a.Subject, a.Text);
            }
            return definitions;
        }

        #region Model Conversion Methods
        // Return an activityModel given an activity and its process status.
        internal static ActivityModel ConvertToModel(Activity activity, ProcessStatus? processStatus = null)
        {
            var model = new ActivityModel(activity);
            if (processStatus != null)
                model.ProcessStatus = (ProcessStatus)processStatus;
            return model;
        }

        // Return an activity given an activityModel.
        internal static Activity ConvertToActivity(ActivityModel activityModel)
        {
            var from = new ChannelAccount()
            {
                Id = activityModel.From.Id,
                Name = activityModel.From.Name
            };

            var recipient = new ChannelAccount()
            {
                Id = activityModel.Recipient.Id,
                Name = activityModel.Recipient.Name
            };

            var conversation = new ConversationAccount()
            {
                Id = activityModel.Conversation.Id,
                IsGroup = activityModel.Conversation.IsGroup,
                Name = activityModel.Conversation.Name
            };

            return new Activity()
            {
                Id = activityModel.Id,
                Text = activityModel.Text,
                Type = activityModel.Type,
                ServiceUrl = activityModel.ServiceUrl,
                Timestamp = activityModel.Timestamp,
                ChannelId = activityModel.ChannelId,
                From = from,
                Conversation = conversation,
                Recipient = recipient,
                ReplyToId = activityModel.ReplyToId
            };
        }
        #endregion

        #region Private Methods
        private UserAccount FindUserAccount(string channelAccountId)
        {
            var channelAccountModel = _db.ChannelAccounts.Find(channelAccountId);
            if (channelAccountModel == null)
                throw new RowNotInTableException("ChannelAccount is not found.");
            return FindUserAccount(channelAccountModel);
        }

        private UserAccount FindUserAccount(ChannelAccountModel channelAccountModel)
        {
            if (channelAccountModel.UserAccountId == null)
                throw new RowNotInTableException("This ChannelAccount does not belong to any UserAccount");
            var userAccount = _db.UserAccounts.Find(channelAccountModel.UserAccountId);
            if (userAccount == null)
                throw new RowNotInTableException(
                    $"The UserAccount (Id: {channelAccountModel.UserAccountId}) is not in database, referential integrity might be broken.");
            return userAccount;
        }

        private ActivityModel FindActivityModel(string activityId)
        {
            var activityRecord = _db.Activities.Include(r => r.From).Include(r => r.Recipient)
                .Include(r => r.Conversation).SingleOrDefault(o => o.Id == activityId);
            if (activityRecord == null) return null;
            return activityRecord;
        }

        private void AttachReference<R>(R referencedColumn, DbSet<R> referencedTable) where R : class, IEFModel
        {
            if(referencedColumn != null)
            {
                var referencedColumnRecord = referencedTable.Find(referencedColumn.Id);
                if(referencedColumnRecord != null)
                {
                    referencedTable.Attach(referencedColumnRecord);
                    referencedColumn = referencedColumnRecord;
                }
            }
        }

        private void AttachReference(ActivityModel activityModel)
        {
            // Check if duplicate key in channelAccount and conversationAccount
            if (activityModel.From != null)
            {
                var channelAccountFrom = _db.ChannelAccounts.Find(activityModel.From.Id);
                if (channelAccountFrom != null)
                {
                    _db.ChannelAccounts.Attach(channelAccountFrom);
                    activityModel.From = channelAccountFrom;
                }
            }

            if (activityModel.Recipient != null)
            {
                var channelRecipient = _db.ChannelAccounts.Find(activityModel.Recipient.Id);
                if (channelRecipient != null)
                {
                    _db.ChannelAccounts.Attach(channelRecipient);
                    activityModel.Recipient = channelRecipient;
                }
            }

            if (activityModel.Conversation != null)
            {
                var conversationAccount = _db.ConversationAccounts.Find(activityModel.Conversation.Id);
                if (conversationAccount != null)
                {
                    _db.ConversationAccounts.Attach(conversationAccount);
                    activityModel.Conversation = conversationAccount;
                }
            }
        }
        #endregion

        #region DbScripts
        private void ImportDictionaryToDb()
        {
            Dictionary<string, string> definitions = new Dictionary<string, string>();
            var sep = Path.DirectorySeparatorChar;
            using (var reader =
                new JsonTextReader(
                new StreamReader(AppDomain.CurrentDomain.BaseDirectory + $"{sep}Words{sep}dictionary.json"))
            )
            {
                definitions = new JsonSerializer().Deserialize<Dictionary<string, string>>(reader);
            }
            foreach(var pair in definitions)
            {
                var answer = new Answer(pair.Key, pair.Value, DateTime.Now);
                try
                {
                    _db.Answers.Add(answer);
                    _db.SaveChanges();
                } catch(DataException)
                {
                    continue;
                }
            }
        }
        #endregion
    }
}