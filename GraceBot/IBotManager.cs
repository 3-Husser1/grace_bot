using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Bot.Connector;
using System;

namespace GraceBot
{
    public interface IBotManager
    {
        /// <summary>
        /// Respond to an activity as an asynchronous operation.
        /// </summary>
        /// <param name="replyText">The text as a reply.</param>
        /// <param name="originalAcitivty">The activity to reply to.</param>
        /// <param name="attachments">The attachments for reply activity.</param>
        /// <returns></returns>
        Task<Activity> ReplyToActivityAsync(string replyText,
            Activity originalAcitivty = null,
            Func<Activity, List<Attachment>> generateAttachments = null,
            Action<Activity> invokeBeforeSend = null);

        /// <summary>
        /// Reply an IsTyping activity, showing user the IS TYPING status
        /// </summary>
        /// <param name="originalActivity">The activity to reply to</param>
        /// <returns></returns>
        Task ReplyIsTypingActivityAsync(Activity originalActivity);
        
        /// <summary>
        /// Get user state as an asynchronous operation.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="property"></param>
        /// <param name="activity">The activity generated by the user.</param>
        /// <returns></returns>
        Task<T> GetUserDataPropertyAsync<T>(string property, Activity activity);

        /// <summary>
        /// Update user state as an asynchronous operation.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="property"></param>
        /// <param name="data"></param>
        /// <param name="activity">The activity generated by the user.</param>
        /// <returns></returns>
        Task SetUserDataPropertyAsync<T>(string property, T data, Activity activity);

        T GetPrivateConversationDataProperty<T>(string property);
        void SetPrivateConversationDataProperty<T>(string property, T data);

        /// <summary>
        /// Delete user state as an asynchronous operation.
        /// </summary>
        /// <param name="activity"></param>
        /// <returns></returns>
        Task<string[]> DeleteStateForUserAsync(Activity activity);
        /// <summary>
        /// Generate questions attachments
        /// </summary>
        /// <param name="activityList"></param>
        /// <returns></returns>
        List<Attachment> GenerateQuestionsAttachments(List<Activity> activityList);
        /// <summary>
        /// Generate Image card
        /// </summary>
        /// <param name="title">card title</param>
        /// <param name="subTitle">card subtitle</param>
        /// <param name="imgUrl">Image url</param>
        /// <param name="buttonsTitleUrlDictionary">Key valur pair dictionary(Title is key, value is url)</param>
        /// <returns></returns>
        Attachment GenerateHeroCard(string title,string subTitle,string imgUrl,Dictionary<string,string> buttonsTitleUrlDictionary=null);
    }
}
